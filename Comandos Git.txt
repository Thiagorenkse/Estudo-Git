|=======================================|
|=============COMANDOS GIT:=============|
|=======================================|

|git status
	Mostra a situação atual dos arquivos no repositório.
	Tanto os não commitados, quanto os arquivos referentes à área de stage.
	
git log
	Mostra o histórico do repositório, todos os commits realizados.
	
git add <nome_do_arquivo>
	Adiciona o arquivos novos ou modificados à área de stage do repositório, passando a rastrear os arquivos novos.
	
git commit
	Commita os arquivos que estão na área de stage, é necesário informar uma mensagem após a execução desse comando no editor de texto do git.
	OBS: Para confirmar a mensagem no editor de texto tecla-se, (ESC), (:)+(w), (:)+(q). 
	
git commit -m "<mensagem>"
	Commita os arquivos que estão na área de stage, informando uma mensagem na hora do commit.
	
git commit -a -m <mensagem> ou git commit -am <mensagem>
	Adciona os arquivos modificados à área de stage, e commita todos os arquivos adicionando a mensagem na hora do commit.
	
arquivo .gitignore
	A existência desse arquivo no repositório, faz com que o Git ignore determinados arquivos ou diretórios.
	Exemplo:
		arquivo.log (ignora somente o arquivo.log na pasta raíz do repositório).
		*.log (ignora todos os arquivos com a extensão .log).
		/pasta (ignora todo o diretório com o nome informado).
		/pasta/arquivo.log (ignora somente o arquivo.log existente no diretório informado).
		/pasta/*.log (ignora todos os arquivos com a extensão .log no diretório pasta).
	OBS: Para criar o arquivo .gitignore, cria-se um .txt e renomeie-o para ".gitignore.", o S.O. entende o "." no final, como um arquivo sem extensão.
		 A ausência do "." no final exige que seja informada um extensão.
	
git config --global user.name <nome_do_usuário>
	Informa ao Git o usuário do sistema.
	
git config --global user.email <email_do_usuário>
	Informa ao Git o email do usuário do sistema.
	
cd ~/<diretório>/<diretório>
	Seleciona o diretório que será usado no momento pelo Git.
	OBS: "~" representa o diretório raíz do usuário no sistema operacional.
		 Para diretórios que possuem espaço(" ") no nome, é necessário colocar todo o nome entre aspas. Exemplo: ~/"pasta de trabalho".
		 
		 
		 
		 
		 
		 
		 
git log --oneline

git log -n <numero>

git diff

git log --stat

git diff --staged

git diff <código do commit>

git diff <código do commit(mais antigo)>..<código do commit(mais atual)>

git diff <código do commit>~<número>

git rm <arquivo.extensao>

git mv <nome_do_arquivo.extensão> <novo_nome_do_arquivo.extensão>

git checkout --<arquivo.extensão>

git reset

git reset -- <arquivo.extensão>

git reset --hard

git reset --hard <código do commit desejado>

git revert --no-edit <código do commit desejado>
	OBS: --no-edit
	
git init --bare <nome do repositório>

git remote add <nome_repositorio_remoto> <url_repositorio_remoto_ex: file://192.168.1.1/opt/repositorios/moveis-ecologicos.git>

 git remote
 
 git remote -v
 
 git remote rename <nome_atual> <novo_nome>
 
 git remote set-url <nome_repoitorio> <nova_url>
 
 git branch
 
 git branch -v
 
 git log --parents
 
 git log --decorate
 
 git branch <nome da branch>
 
 git checkout <nome da branch>
 
 git checkout -b <nome da branch>
 
 git checkout -d <nome da branch>
 
 git branch --no-merged
 
 git branch --merged
 
 git merge <nome branch desejada> -m "mensagem"
 
 git merge <nome da branch desejada> -no-ff -m "mensagem"
 
 git rebase <nome da branch desejada> 
 obs:Rebase significa restaurar a branch que receberá os commits, de uma outra branch, ao seu estado inicial. Antes de se ter criado a segunda branch a partir dela. 
 Então aplica-se todos os commits da segunda branch na branch primária, e depois aplicão-se todos os commits da branch primária posteriores à criação da segunda branch.
 
 git branch -r
 
 git branch -a
 
 git branch -av ou git branch -a -v
 
 git branch -rv ou git branch -r -v
 
 git fecth <nome repositório remoto>
 
 git pull
 
 git pull --rebase
 
 git checkout -b contato
 
 git branch -D <nome branch>
 
 git push <nome repositorio remoto> :<nome branch remota>
 
Fast Foward - acontece quando é realizado um merge com uma branch, onde a branch original (primária), ainda não recebeu nenhum commit, ou seja, manteve seu estado igual quando houve a criação da segunda branch.
Então ao ser realizado o merge com a branch secundária, apenas realiza-se os commits da segunda branch na branch primária, ou seja as duas branch ficam exatamente iguais.
 
 OBS: para manter o histórico intacto de uma branch principal após um rebase existe uma maneira. Ao invés de realizar o rebase da branch secundária na primária (o que colocaria todos os commits 
 da branch secundária como antepassados dos novos commits da branch primária, e os novos commit da primária teria seus ids alterados).
 Primeiramente trocaríamos para a branch secundária, e então faríamos o rebase da primária na secundária, aplicando todos os commits realizados na primária após a criação da segunda, como 
 antepassados dos commits relaizados na segunda. Seria como se a branch secundária tivesse sido criada após a realização de todos os commits atuais da branch primária.
 Então depois mudaríamos para a branch master e agora sim, com a branch secundária já tendo todos os commits da primária como antepassados de seus próprios commits, faríamos um rebase,
 agora, da secundária na primária. O que aconteceria um fast foward, o histórico da branch primária ficara intacto, e seriam aplicados como posteriores todos os commits da branch secundária.
 
 |-------------------------------------|
 |---------------GitHub----------------|
 |-------------------------------------|
 
 fork
 pull request
 
 